function Cell(e,t,i){this.x=e,this.y=t,this.type=i}Config={SCORE_INC:1,BOARD_HEIGHT:18,BOARD_WIDTH:43,DIR_LEFT:"left",DIR_UP:"up",DIR_RIGHT:"right",DIR_DOWN:"down",KEY_LEFT:37,KEY_UP:38,KEY_RIGHT:39,KEY_DOWN:40,SNAKE_START:[{x:21,y:7},{x:22,y:7},{x:23,y:7},{x:24,y:7},{x:25,y:7},{x:26,y:7}],SNAKE_SPEED:250,HEAD_IMG_SRC:"img/Snake-",CSS_EMPTY_CLASS:"empty",CSS_SNAKE_CLASS:"snake",CSS_HEAD_CLASS:"head",CSS_FOOD_CLASS:"food",CSS_CRASH_CLASS:"crash",ACTION_SNAKE_MOVE:"snakeMove",ACTION_FOOD_GENERATE:"foodGenerate",ACTION_SNAKE_EAT:"snakeEat",ACTION_SNAKE_COLLIDE:"snakeCollide",ACTION_SNAKE_INIT:"snakeInit"},GameActions=Reflux.createActions(["snakeUpdated","snakeMove","snakeEat","snakeCollided","foodUpdated","boardInit","gameStart","gamePause"]);var foodStore=Reflux.createStore({listenables:[GameActions],cell:void 0,initialize:function(e){this.cell=this.cell||this.generate(e)},onSnakeUpdated:function(e){this.initialize(e.cells),GameActions.foodUpdated(this)},onSnakeEat:function(e){this.cell=this.generate(e),GameActions.foodUpdated(this)},generate:function(e){var t={};return t.x=this.rand(0,Config.BOARD_HEIGHT-1),t.y=this.rand(0,Config.BOARD_WIDTH-1),this.validPoint(t,e)?t:this.generate(e)},validPoint:function(e,t){if(e.x>Config.BOARD_WIDTH-1||e.x<0||e.y>Config.BOARD_HEIGHT-1||e.y<0)return!1;for(var i=0;i<t.length;i++)if(t[i].x===e.x&&t[i].y===e.y)return!1;return!0},rand:function(e,t){return Math.floor(Math.random()*(t-e+1)+e)}}),snakeStore=Reflux.createStore({listenables:[GameActions],cells:[],direction:"",initialize:function(){this.cells=Config.SNAKE_START.slice(0),this.direction=Config.DIR_RIGHT},onBoardInit:function(){this.initialize(),GameActions.snakeUpdated(this)},onFoodUpdated:function(e){if(void 0===this.food){var t=this;this.Interval=setInterval(function(){t.move(t.direction)},Config.SNAKE_SPEED)}this.food=e.cell},onSnakeMove:function(e){this.move(e)},validateDirection:function(e){return e=e||this.direction,e===Config.DIR_RIGHT&&this.direction===Config.DIR_LEFT?Config.DIR_LEFT:e===Config.DIR_LEFT&&this.direction===Config.DIR_RIGHT?Config.DIR_RIGHT:e===Config.DIR_UP&&this.direction===Config.DIR_DOWN?Config.DIR_DOWN:e===Config.DIR_DOWN&&this.direction===Config.DIR_UP?Config.DIR_UP:e},validatePoint:function(e){return e.x>=Config.BOARD_WIDTH&&(e.x=0),e.y>=Config.BOARD_HEIGHT&&(e.y=0),e.x<0&&(e.x=Config.BOARD_WIDTH-1),e.y<0&&(e.y=Config.BOARD_HEIGHT-1),e},move:function(e){var t={x:this.cells[this.cells.length-1].x,y:this.cells[this.cells.length-1].y};switch(this.direction=this.validateDirection(e),this.direction){case Config.DIR_RIGHT:t.x+=1;break;case Config.DIR_LEFT:t.x-=1;break;case Config.DIR_UP:t.y-=1;break;case Config.DIR_DOWN:t.y+=1}this.cells.push(this.validatePoint(t)),this.eat()?GameActions.snakeEat(this.cells):this.collides()!==!1?(console.log("Crashed"),GameActions.gameStart()):(this.cells.shift(),GameActions.snakeUpdated(this))},eat:function(){var e={x:this.cells[this.cells.length-1].x,y:this.cells[this.cells.length-1].y};return this.food.x===e.x&&this.food.y===e.y},collides:function(){for(var e=0;e<this.cells.length-1;e++)for(var t=e+1;t<this.cells.length;t++)if(this.cells[e].x===this.cells[t].x&&this.cells[e].y===this.cells[t].y)return this.cells[e];return!1}}),boardStore=Reflux.createStore({listenables:[GameActions],cells:[],score:"",initBoard:function(){for(var e=new Array(Config.BOARD_HEIGHT),t=0;t<Config.BOARD_HEIGHT;t++){e[t]=new Array(Config.BOARD_WIDTH);for(var i=0;i<Config.BOARD_WIDTH;i++)e[t][i]=new Cell(i,t,Config.CSS_EMPTY_CLASS)}return e},getInitialState:function(){return this},onGameStart:function(){this.score=0,this.cells=this.initBoard(),GameActions.boardInit()},onFoodUpdated:function(e){this.food=e.cell,this.updateBoard()},onSnakeUpdated:function(e){this.snake={cells:e.cells,direction:e.direction},this.updateBoard()},onSnakeEat:function(){this.score+=Config.SCORE_INC},updateFood:function(){this.cells[this.food.y][this.food.x].type=Config.CSS_FOOD_CLASS},updateSnake:function(){for(var e=this.snake.cells.length,t=0;e>t;t++)this.cells[this.snake.cells[t].y][this.snake.cells[t].x].type=Config.CSS_SNAKE_CLASS;this.cells[this.snake.cells[e-1].y][this.snake.cells[e-1].x].type=Config.CSS_HEAD_CLASS},updateBoard:function(){for(var e=0;e<this.cells.length;e++)for(var t=0;t<this.cells[e].length;t++)this.cells[e][t].type=Config.CSS_EMPTY_CLASS;void 0!==this.snake&&this.updateSnake(),void 0!==this.food&&this.updateFood(),this.trigger(this)}}),CellComponent=React.createClass({displayName:"CellComponent",render:function(){var e=this.props.cell.x+","+this.props.cell.y;if("head"==this.props.cell.type)return React.createElement(HeadComponent,{pos:e,direction:this.props.direction});var t="cell "+this.props.cell.type;return React.createElement("div",{"data-pos":e,className:t})}}),HeadComponent=React.createClass({displayName:"HeadComponent",render:function(){var e=Config.HEAD_IMG_SRC+this.props.direction+".png";return React.createElement("div",{"data-pos":this.props.pos,className:"cell empty"},React.createElement("img",{src:e}))}}),ScoreComponent=React.createClass({displayName:"ScoreComponent",render:function(){return React.createElement("h2",{className:"score"},"Your Score is : ",this.props.score)}}),BoardComponent=React.createClass({displayName:"BoardComponent",componentDidMount:function(){GameActions.gameStart(),window.document.addEventListener("keydown",this.handleClick)},handleClick:function(e){e=e||window.event;var t="";switch(e.keyCode){case Config.KEY_LEFT:t=Config.DIR_LEFT;break;case Config.KEY_UP:t=Config.DIR_UP;break;case Config.KEY_RIGHT:t=Config.DIR_RIGHT;break;case Config.KEY_DOWN:t=Config.DIR_DOWN}GameActions.snakeMove(t)},render:function(){for(var e=[],t=0;t<this.props.cells.length;t++){for(var i=[],n=0;n<this.props.cells[t].length;n++)i.push(React.createElement(CellComponent,{cell:this.props.cells[t][n],direction:this.props.direction}));e.push(React.createElement("div",{className:"row"},i))}return React.createElement("div",{className:"table"},e)}}),GameComponent=React.createClass({displayName:"GameComponent",mixins:[Reflux.connect(boardStore)],getInitialState:function(){return{snake:{direction:"right"}}},render:function(){return React.createElement("div",{id:"game"},React.createElement("div",{id:"score"},React.createElement(ScoreComponent,{score:this.state.score})),React.createElement("div",{id:"board"},React.createElement(BoardComponent,{cells:this.state.cells,direction:this.state.snake.direction})))}});React.render(React.createElement(GameComponent,null),document.body);